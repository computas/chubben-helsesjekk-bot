name: 'Build and Deploy to GKE'

on:
  push:
  workflow_dispatch:

env:
  REPOSITORY: 'helse'
  IMAGE: 'chubben-helsesjekk-bot'
  DEPLOYMENT_NAME: 'helsesjekk-bot'

  WORKLOAD_IDENTITY_PROVIDER: 'projects/714619712093/locations/global/workloadIdentityPools/github/providers/chubben-provider'
  GAR_LOCATION: 'europe-west1'
  GKE_CLUSTER: 'chubben'
  GKE_NAMESPACE: 'helse'
  GKE_ZONE: 'europe-west1'
  PROJECT_ID: 'chubben'

jobs:
  build-and-publish:
    name: 'Build and publish'
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      - id: corepack
        shell: bash
        run: corepack enable

      - uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 20.x
          cache: yarn

      - id: set-env
        shell: bash
        run: echo "NPM_AUTH_TOKEN=${{ secrets.GP_TOKEN }}" >> $GITHUB_ENV

      - id: yarn-install
        shell: bash
        run: yarn --immutable

      - run: yarn lint

      - run: yarn build
        env:
          NEXT_PUBLIC_ENVIRONMENT: production

      # Configure Workload Identity Federation and generate an access token.
      - id: 'gcp-auth'
        name: 'Authenticate for Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: '${{ env.PROJECT_ID }}'
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.gcp-auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            --build-arg GP_TOKEN="${{ secrets.GP_TOKEN }}" \
            --build-arg NEXT_PUBLIC_ENVIRONMENT="production" \
            .

          docker push "${DOCKER_TAG}"

  deploy-to-production:
    if: github.ref_name == 'main'
    needs:
      - build-and-publish

    name: 'Deploy to production'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      # Configure Workload Identity Federation and generate an access token.
      - name: 'Authenticate for Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: '${{ env.PROJECT_ID }}'
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Authenticate for Kubernetes'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to Kubernetes'
        run: |-
          # Replace placeholder in deployment file with actual image name
          sed -i "s,FULL_IMAGE_NAME,$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA,g" k8s/deployment.yaml

          # Apply the Kubernetes configuration
          kubectl --namespace $GKE_NAMESPACE apply -f k8s/

          # Wait for the deploy to be successful
          kubectl --namespace $GKE_NAMESPACE rollout status deployment/$DEPLOYMENT_NAME
          kubectl --namespace $GKE_NAMESPACE get services -o wide
